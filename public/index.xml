<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Portfolio</title>
    <link>/</link>
    <description>Recent content on Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 12 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description>Projects Here are some projects I have recently completed:
  Exploratory Data Analysis with Tidyverse Tools
  Modeling, Testing, and Classification
  </description>
    </item>
    
    <item>
      <title>Python </title>
      <link>/blog/python/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/python/</guid>
      <description>This blog is a brief review on using regular expression and the re.findall() function with multiple matches.
Re.findall() FunctionThe re.findall() function is an excellent tool in Python to look for and return all instances of a certain result in a string or list. There are special symbols and characters that can be used to return different results. Some examples of these symbols will be shown below.
We first must call the reticulate package to allow us to use Python within R.</description>
    </item>
    
    <item>
      <title>Python </title>
      <link>/2020/05/09/python/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/09/python/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Project 2: Modeling, Testing, and Predicting</title>
      <link>/project2/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/project2/</guid>
      <description>Modeling0.#INTRODUCING DATA library(tidyr)pop &amp;lt;-as.data.frame(population)library(VGAM)olympics &amp;lt;- as.data.frame(olym12)pop &amp;lt;- pop %&amp;gt;% pivot_wider(names_from =&amp;quot;year&amp;quot;, values_from=&amp;quot;population&amp;quot;)pop1 &amp;lt;- pop[-c(2:18, 20)]library(dplyr)as.data.frame(apply(olympics,2,function(x)gsub(&amp;#39;\\s+&amp;#39;, &amp;#39;&amp;#39;,x)))## ranking country gold silver bronze totalmedal## 1 1 UnitedStates 46 29 29 104## 2 2 China 38 27 23 88## 3 3 GreatBritain 29 17 19 65## 4 4 Russia 24 26 32 82## 5 5 SouthKorea 13 8 7 28## 6 6 Germany 11 19 14 44## 7 7 France 11 11 12 34## 8 8 Italy 8 9 11 28## 9 9 Hungary 8 4 5 17## 10 10 Australia 7 16 12 35## 11 11 Japan 7 14 17 38## 12 12 Kazakhstan 7 1 5 13## 13 13 Netherlands 6 6 8 20## 14 14 Ukraine 6 5 9 20## 15 15 NewZealand 6 2 5 13## 16 16 Cuba 5 3 6 14## 17 17 Iran 4 5 3 12## 18 18 Jamaica 4 4 4 12## 19 19 CzechRepublic 4 3 3 10## 20 20 NorthKorea 4 0 2 6## 21 21 Spain 3 10 4 17## 22 22 Brazil 3 5 9 17## 23 23 SouthAfrica 3 2 1 6## 24 24 Ethiopia 3 1 3 7## 25 25 Croatia 3 1 2 6## 26 26 Belarus 2 5 5 12## 27 27 Romania 2 5 2 9## 28 28 Kenya 2 4 5 11## 29 29 Denmark 2 4 3 9## 30 30 Poland 2 2 6 10## 31 30 Azerbaijan 2 2 6 10## 32 32 Turkey 2 2 1 5## 33 33 Switzerland 2 2 0 4## 34 34 Lithuania 2 1 2 5## 35 35 Norway 2 1 1 4## 36 36 Canada 1 5 12 18## 37 37 Sweden 1 4 3 8## 38 38 Colombia 1 3 4 8## 39 39 Mexico 1 3 3 7## 40 39 Georgia 1 3 3 7## 41 41 Ireland 1 1 3 5## 42 42 Slovenia 1 1 2 4## 43 42 Serbia 1 1 2 4## 44 42 Argentina 1 1 2 4## 45 45 Tunisia 1 1 1 3## 46 46 DominicanRepublic 1 1 0 2## 47 47 Uzbekistan 1 0 3 4## 48 47 TrinidadandTobago 1 0 3 4## 49 49 Latvia 1 0 1 2## 50 50 Venezuela 1 0 0 1## 51 50 Uganda 1 0 0 1## 52 50 Grenada 1 0 0 1## 53 50 Bahamas 1 0 0 1## 54 50 Algeria 1 0 0 1## 55 55 India 0 2 4 6## 56 56 Mongolia 0 2 3 5## 57 57 Thailand 0 2 1 3## 58 58 Egypt 0 2 0 2## 59 59 Slovakia 0 1 3 4## 60 60 Finland 0 1 2 3## 61 60 Belgium 0 1 2 3## 62 60 Armenia 0 1 2 3## 63 63 PuertoRico 0 1 1 2## 64 63 Malaysia 0 1 1 2## 65 63 Indonesia 0 1 1 2## 66 63 Estonia 0 1 1 2## 67 63 Taiwan 0 1 1 2## 68 63 Bulgaria 0 1 1 2## 69 69 Portugal 0 1 0 1## 70 69 Montenegro 0 1 0 1## 71 69 Guatemala 0 1 0 1## 72 69 Gabon 0 1 0 1## 73 69 Cyprus 0 1 0 1## 74 69 Botswana 0 1 0 1## 75 75 Singapore 0 0 2 2## 76 75 Qatar 0 0 2 2## 77 75 Moldova 0 0 2 2## 78 75 Greece 0 0 2 2## 79 79 Tajikistan 0 0 1 1## 80 79 SaudiArabia 0 0 1 1## 81 79 Morocco 0 0 1 1## 82 79 Kuwait 0 0 1 1## 83 79 HongKong 0 0 1 1## 84 79 Bahrain 0 0 1 1## 85 79 Afghanistan 0 0 1 1pop1 &amp;lt;- as.</description>
    </item>
    
    <item>
      <title>Project 1</title>
      <link>/project1/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/project1/</guid>
      <description>#Data Sets:library(tidyr)head(population)## # A tibble: 6 x 3## country year population## &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;## 1 Afghanistan 1995 17586073## 2 Afghanistan 1996 18415307## 3 Afghanistan 1997 19021226## 4 Afghanistan 1998 19496836## 5 Afghanistan 1999 19987071## 6 Afghanistan 2000 20595360pop &amp;lt;-as.data.frame(population)library(VGAM)head(olym12)## ranking country gold silver bronze totalmedal## 1 1 UnitedStates 46 29 29 104## 2 2 China 38 27 23 88## 3 3 GreatBritain 29 17 19 65## 4 4 Russia 24 26 32 82## 5 5 SouthKorea 13 8 7 28## 6 6 Germany 11 19 14 44olympics &amp;lt;- as.</description>
    </item>
    
  </channel>
</rss>